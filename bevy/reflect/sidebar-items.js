initSidebarItems({"attr":[["reflect_trait",""]],"derive":[["Reflect",""],["TypeUuid",""]],"enum":[["ReflectMut",""],["ReflectPathError",""],["ReflectRef",""]],"fn":[["list_apply",""],["list_partial_eq",""],["map_partial_eq",""],["struct_partial_eq",""],["tuple_apply",""],["tuple_partial_eq",""],["tuple_struct_partial_eq",""]],"macro":[["external_type_uuid",""],["impl_reflect_value",""]],"mod":[["erased_serde","github crates-io docs-rs"],["prelude",""],["serde",""]],"struct":[["DynamicList",""],["DynamicMap",""],["DynamicStruct",""],["DynamicTuple",""],["DynamicTupleStruct",""],["FieldIter",""],["ListIter",""],["MapIter",""],["ReflectDeserialize",""],["ReflectHasher","A `Hasher` for hashing an arbitrary stream of bytes."],["TupleFieldIter",""],["TupleStructFieldIter",""],["TypeRegistration",""],["TypeRegistry",""],["TypeRegistryArc",""],["TypeRegistryInternal",""],["Uuid","A Universally Unique Identifier (UUID)."]],"trait":[["FromType",""],["GetField",""],["GetPath",""],["GetTupleField",""],["GetTupleStructField",""],["GetTypeRegistration",""],["List","An ordered, mutable list of [Reflect] items. This corresponds to types like [std::vec::Vec]."],["Map","An ordered ReflectValue->ReflectValue mapping. ReflectValue Keys are assumed to return a non-None hash. Ideally the ordering is stable across runs, but this is not required. This corresponds to types like [std::collections::HashMap]."],["Reflect","A reflected rust type."],["Struct","An ordered &str->ReflectValue mapping where &str is a \"field\". This corresponds to rust struct types."],["Tuple",""],["TupleStruct","A rust \"tuple struct\" reflection"],["TypeData",""],["TypeUuid",""],["TypeUuidDynamic",""]]});