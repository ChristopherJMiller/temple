initSidebarItems({"attr":[["bevy_main",""],["reflect_trait",""]],"derive":[["AmbiguitySetLabel",""],["Bundle",""],["DynamicPlugin","Generates a dynamic plugin entry point function for the given `Plugin` type.  "],["Reflect",""],["RunCriteriaLabel",""],["StageLabel",""],["SystemLabel",""]],"enum":[["AlignContent",""],["AlignItems",""],["AlignSelf",""],["AssetEvent","Events that happen on assets of type `T`"],["Color",""],["CoreStage","The names of the default App stages"],["Direction",""],["Display",""],["FileDragAndDrop","Events related to files being dragged and dropped on a window."],["FlexDirection",""],["FlexWrap",""],["GamepadAxisType",""],["GamepadButtonType",""],["GamepadEventType",""],["HorizontalAlign","Describes horizontal alignment preference for positioning & bounds."],["Interaction",""],["JustifyContent",""],["KeyCode","The key code of a keyboard input."],["MouseButton","A button on a mouse device"],["PositionType",""],["SpriteResizeMode","Determines how `Sprite` resize should be handled"],["StartupStage","The names of the default App startup stages"],["TextError",""],["Val",""],["VerticalAlign","Describes vertical alignment preference for positioning & bounds. Currently a placeholder for future functionality."]],"fn":[["despawn_with_children_recursive",""],["parent_update_system",""]],"macro":[["debug","Constructs an event at the debug level."],["debug_span","Constructs a span at the debug level."],["error","Constructs an event at the error level."],["error_span","Constructs a span at the error level."],["info","Constructs an event at the info level."],["info_span","Constructs a span at the info level."],["trace","Constructs an event at the trace level."],["trace_span","Constructs a span at the trace level."],["warn","Constructs an event at the warn level."],["warn_span","Constructs a span at the warn level."]],"mod":[["shape","Generation for some primitive shape meshes."]],"struct":[["Added","Filter that retrieves components of type `T` that have been added since the last execution of this system"],["Anchors",""],["App","Containers of app logic and data"],["AppBuilder","Configure [App]s using the builder pattern"],["AssetServer","Loads assets from the filesystem on background threads"],["Assets","Stores Assets of a given type and tracks changes to them."],["Audio","The external struct used to play audio"],["AudioOutput","Used internally to play audio on the current \"audio device\""],["AudioSource","A source of audio data"],["Axis",""],["BVec2","A 2-dimensional boolean vector."],["BVec3","A 3-dimensional boolean vector."],["BVec4","A 4-dimensional boolean vector."],["Button",""],["ButtonBundle",""],["CalculatedSize",""],["ChangeTrackers","Change trackers for component `T`"],["Changed","Filter that retrieves components of type `T` that have been changed since the last execution of this system"],["ChildBuilder",""],["Children",""],["ClearColor",""],["ColorMaterial",""],["Commands","A list of commands that will be run to modify a `World`"],["CursorEntered",""],["CursorLeft",""],["CursorMoved",""],["DefaultPlugins",""],["DefaultTaskPoolOptions","Helper for configuring and creating the default task pools. For end-users who want full control, insert the default task pools into the resource map manually. If the pools are already inserted, this helper will do nothing."],["DespawnRecursive",""],["Draw","A component that indicates how to draw an entity."],["DynamicScene",""],["Entity","Lightweight unique ID of an entity"],["EntityLabels","Maintains a mapping from Entity ids to entity labels and entity labels to Entities."],["EventReader","Reads events of type `T` in order and tracks which events have already been read."],["EventWriter","Sends events of type `T`."],["Font",""],["Gamepad",""],["GamepadAxis",""],["GamepadButton",""],["GamepadEvent",""],["GlobalTransform","Describe the position of an entity relative to the reference frame."],["Handle","A handle into a specific Asset of type `T`"],["HandleUntyped","A non-generic version of [Handle]"],["IVec2","A 2-dimensional vector."],["IVec3","A 3-dimensional vector."],["IVec4","A 4-dimensional vector."],["ImageBundle",""],["In",""],["Input","A \"press-able\" input of type `T`"],["InsertChildren",""],["Labels","A collection of labels"],["Light","A point light"],["LightBundle","A component bundle for \"light\" entities"],["Local",""],["Margins",""],["Mat3","A 3x3 column major matrix."],["Mat4","A 4x4 column major matrix."],["Mesh",""],["MeshBundle","A component bundle for \"mesh\" entities"],["MinimalPlugins",""],["Msaa",""],["Mut","Unique borrow of an entity's component"],["Name","Component used to identify an entity. Stores a hash for faster comparisons"],["Node",""],["NodeBundle",""],["NonSend","Shared borrow of a NonSend resource"],["NonSendMut","Unique borrow of a NonSend resource"],["Or",""],["OrthographicCameraBundle","Component bundle for camera entities with orthographic projection"],["Parent",""],["PbrBundle","A component bundle for \"pbr mesh\" entities"],["PerspectiveCameraBundle","Component bundle for camera entities with perspective projection"],["PreviousParent",""],["PushChildren",""],["Quat","A quaternion representing an orientation."],["Query","Provides scoped access to a World according to a given [WorldQuery] and query filter"],["QuerySet",""],["QueryState",""],["ReceivedCharacter","An event that is sent whenever a window receives a character from the OS or underlying system."],["Rect","A rect, as defined by its \"side\" locations"],["ReflectComponent",""],["ReflectDeserialize",""],["RemovedComponents",""],["RenderPipelines",""],["Res","Shared borrow of a Resource"],["ResMut","Unique borrow of a Resource"],["RunCriteria",""],["Scene",""],["SceneSpawner",""],["Schedule",""],["Shader","A shader, as defined by its [ShaderSource] and [ShaderStage]"],["Size","A two dimensional \"size\" as defined by a width and height"],["Sprite",""],["SpriteBundle",""],["SpriteSheetBundle","A Bundle of components for drawing a single sprite from a sprite sheet (also referred to as a `TextureAtlas`)"],["StandardMaterial","A material with \"standard\" properties used in PBR lighting Standard property values with pictures here https://google.github.io/filament/Material%20Properties.pdf"],["State","Stack based state machineThis state machine has four operations: Push, Pop, Set and Replace."],["Style",""],["SystemSet","A builder for describing several systems at the same time."],["SystemStage","Stores and executes systems. Execution order is not defined unless explicitly specified; see `SystemDescriptor` documentation."],["Text",""],["Text2dBundle","The bundle of components needed to draw text in a 2D scene via the Camera2dBundle."],["TextAlignment",""],["TextBundle",""],["TextSection",""],["TextStyle",""],["Texture",""],["TextureAtlas","An atlas containing multiple textures (like a spritesheet or a tilemap)"],["TextureAtlasSprite",""],["Time","Tracks elapsed time since the last update and since the App has started"],["Timer","Tracks elapsed time. Enters the finished state once `duration` is reached."],["TouchInput","Represents a touch event"],["Touches",""],["Transform","Describe the position of an entity. If the entity has a parent, the position is relative to its parent position."],["TransformPlugin",""],["UVec2","A 2-dimensional vector."],["UVec3","A 3-dimensional vector."],["UVec4","A 4-dimensional vector."],["UiCameraBundle",""],["Vec2","A 2-dimensional vector."],["Vec3","A 3-dimensional vector without SIMD support."],["Vec4","A 4-dimensional vector."],["Visible",""],["Window","An operating system window that can present content and receive user input."],["WindowDescriptor",""],["WindowMoved","An event that is sent when a window is repositioned in physical pixels."],["Windows",""],["With","Filter that selects entities with a component `T`"],["WithBundle",""],["Without","Filter that selects entities without a component `T`"],["World","[World] stores and exposes operations on entities, components, and their associated metadata. Each [Entity] has a set of components. Each component can have up to one instance of each component type. Entity components can be created, updated, removed, and queried using a given [World]."],["WorldChildBuilder",""]],"trait":[["AddAsset","[AppBuilder] extension methods for adding new asset types"],["AmbiguitySetLabel",""],["BuildChildren",""],["BuildWorldChildren",""],["Bundle","An ordered collection of components, commonly used for spawning entities, and adding and removing components in bulk."],["Decodable",""],["DespawnRecursiveExt",""],["ExclusiveSystemDescriptorCoercion",""],["FaceToward","Generates a translation / rotation matrix that faces a given target"],["FromWorld","Creates `Self` using data from the given [World]"],["GetField",""],["GetTupleStructField",""],["IntoChainSystem",""],["IntoExclusiveSystem",""],["IntoSystem",""],["ParallelSystemDescriptorCoercion",""],["Plugin","A collection of Bevy App logic and configuration"],["PluginGroup",""],["Reflect","A reflected rust type."],["RunCriteriaDescriptorCoercion",""],["RunCriteriaLabel",""],["RunCriteriaPiping",""],["SpawnSceneAsChildCommands",""],["SpawnSceneCommands",""],["Stage",""],["StageLabel",""],["Struct","An ordered &str->ReflectValue mapping where &str is a \"field\". This corresponds to rust struct types."],["System","An ECS system that can be added to a Schedule"],["SystemLabel",""],["TupleStruct","A rust \"tuple struct\" reflection"]]});